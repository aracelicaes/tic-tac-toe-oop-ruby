#!/usr/bin/env ruby

# creating the instance of the game
#   loop ends if win/loss or 9 movements done
#     user inputs alternating between the 2 users
#     validate if win/draw
#     print board if no win
#     win/loss announce if win/draw
# end

# GAME CLASS
class Game
  
    acce
  def initialize
    # @valiadator = Validator.new
    greeting
  end

  def greeting
    puts "Hello! Welcome to Tic-Tac-Toe!"
    puts "Please Select, Would you like to be Player A or Player B?"
    puts "Player ‚ùå or Player üîµ"
    player_o = gets.chomp
    player_x = gets.chomp
    x

    # (0..1).each{|player| player = Player.new(@valiadator.get_symbol)}
    # @board = Board.new
  end


=begin
  def user_input
    #take user input
    player_x = gets.chomp
    player_o = gets.chomp
    #receive validated input
  end

  def print_move
    #receive validated input
    #print new board with validated input
  end

  def win_lost_announce
    # Congratulations! yOu've won!
    # Boohoo you've lost player bla
  end
end

class Player
  @symbol
  def initialize
    puts 'player'
  end

  def x
    @symbol = 'x'
  end

  def o
    @symbol = 'o'
  end
  # gets.chomp of Player inputs
  # receives user input
  # returns user input to validator class
  # receive from valiator class
  # return to Game Class
  # Player A is always ‚ùå
  # Player B is always üîµ
end

class Validator

  def initialize
    puts 'validator'
  end

  def get_symbol

  end
  # VALIDATION PART 1
  # gets all inputs from Game Class and Players Class
  # Validates
  # if player_input == true return value to corresponding class
  # else return "Sorry, invalid input. Try again"

  # VALIDATION PART 2
  # gets position input from Board Class
  # Validates
  # if postion_input == avlbl position return to corresponding Class
  # else return "Sorry, that spot is already taken, please select another # from 1-9"

  # VALIDATION PART 3
  # Receive board_status (Available/Unavailable spots)
  # Check if | or \ or --- positions are filled return WIN
    # Check if WIN is by X or O return WINNER & LOSER
  # else continue game
end

class Board
  def initialize
    puts 'board'
  end
=end
end



Game.new
